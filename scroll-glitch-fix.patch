diff --git a/src/PaginationPlus.ts b/src/PaginationPlus.ts
index ad85a1d..7cecdc4 100644
--- a/src/PaginationPlus.ts
+++ b/src/PaginationPlus.ts
@@ -113,8 +113,6 @@ export const PaginationPlus = Extension.create<PaginationPlusOptions>({
       initialSetupCompleteTime: 0,
       // Lock the expected height range for content
       lockedHeightRange: { min: 0, max: 0 },
-      // Allow page count updates even when height is unstable (for deletions)
-      allowUnstableUpdate: false,
       // Flag to scroll to cursor after pagination (for large paste)
       scrollToCursorAfterUpdate: false,
       // Track typing activity to avoid interfering with cursor during active typing
@@ -128,10 +126,9 @@ export const PaginationPlus = Extension.create<PaginationPlusOptions>({
       pluginInstanceId: null as string | null,
       // Store editor reference for plugin access
       editor: null as any,
-      // Scroll position preservation for backspace deletions
-      offsetFromBottom: undefined as number | undefined,
-      blockScrollIntoView: false,
-      savedPageCountBeforeDeletion: undefined as number | undefined,
+      // Simpler scroll preservation for deletions at end of document
+      pendingScrollAdjustment: 0,
+      isAtEndOfDoc: false,
       // Cursor position in viewport for typing scenarios
       cursorViewportOffset: undefined as number | undefined,
     };
@@ -144,6 +141,61 @@ export const PaginationPlus = Extension.create<PaginationPlusOptions>({
     // Store editor reference for plugin access
     this.storage.editor = this.editor;
 
+    // Add keydown/keyup handlers for simpler scroll preservation
+    const handleKeyDown = (event: KeyboardEvent) => {
+      if (event.key === 'Backspace') {
+        const { selection, doc } = this.editor.state;
+        const cursorAtEnd = selection.from >= doc.content.size - 1;
+        
+        if (cursorAtEnd && this.storage.correctPageCount > 1) {
+          // Store that we're at end of doc for the keyup handler
+          this.storage.isAtEndOfDoc = true;
+          
+          // Estimate the line height that will be removed
+          const estimatedLineHeight = this.options.fontSize * this.options.lineHeight;
+          this.storage.pendingScrollAdjustment = estimatedLineHeight;
+          
+          console.log('[PaginationPlus] Keydown: Backspace at end detected', {
+            pageCount: this.storage.correctPageCount,
+            lineHeight: estimatedLineHeight
+          });
+        } else {
+          this.storage.isAtEndOfDoc = false;
+          this.storage.pendingScrollAdjustment = 0;
+        }
+      }
+    };
+    
+    const handleKeyUp = (event: KeyboardEvent) => {
+      if (event.key === 'Backspace' && this.storage.pendingScrollAdjustment > 0) {
+        // Apply the scroll adjustment after the DOM has updated
+        requestAnimationFrame(() => {
+          const scrollContainer = targetNode.scrollHeight > targetNode.clientHeight ? targetNode : window;
+          
+          if (scrollContainer === window) {
+            window.scrollBy(0, -this.storage.pendingScrollAdjustment);
+            console.log('[PaginationPlus] Keyup: Applied window scroll adjustment', -this.storage.pendingScrollAdjustment);
+          } else {
+            targetNode.scrollTop = Math.max(0, targetNode.scrollTop - this.storage.pendingScrollAdjustment);
+            console.log('[PaginationPlus] Keyup: Applied container scroll adjustment', -this.storage.pendingScrollAdjustment);
+          }
+          
+          // Reset
+          this.storage.pendingScrollAdjustment = 0;
+          this.storage.isAtEndOfDoc = false;
+        });
+      }
+    };
+    
+    targetNode.addEventListener('keydown', handleKeyDown);
+    targetNode.addEventListener('keyup', handleKeyUp);
+    
+    // Track cleanup
+    this.storage.cleanups.push(() => {
+      targetNode.removeEventListener('keydown', handleKeyDown);
+      targetNode.removeEventListener('keyup', handleKeyUp);
+    });
+
     // Options are available as this.options
 
     // Named constants for layout calculations
@@ -740,8 +792,8 @@ export const PaginationPlus = Extension.create<PaginationPlusOptions>({
 
               // Update page count if changed
               if (pageCount !== this.storage.correctPageCount) {
-                // Update if height is stable AND outside locked range, OR if unstable update is allowed
-                const shouldUpdate = (!withinLockedRange && isHeightStable) || this.storage.allowUnstableUpdate;
+                // Update if height is stable AND outside locked range
+                const shouldUpdate = (!withinLockedRange && isHeightStable);
                 
                 
                 if (shouldUpdate) {
@@ -749,18 +801,7 @@ export const PaginationPlus = Extension.create<PaginationPlusOptions>({
                   this.storage.correctPageCount = Math.max(1, pageCount);
 
 
-                  // Clear the unstable update flag after use
-                  this.storage.allowUnstableUpdate = false;
                   
-                  // If page count decreased due to deletion, clear scroll protection after update
-                  if (pageCount < oldPageCount && this.storage.blockScrollIntoView) {
-                    // Delay clearing the block to ensure all scroll operations are complete
-                    requestAnimationFrame(() => {
-                      requestAnimationFrame(() => {
-                        this.storage.blockScrollIntoView = false;
-                      });
-                    });
-                  }
 
                   // Update locked range for new page count
                   const tolerance = contentPerPage * 0.5;
@@ -791,22 +832,6 @@ export const PaginationPlus = Extension.create<PaginationPlusOptions>({
                     });
                   }
                 }
-              } else {
-                // Clear allowUnstableUpdate flag even if page count didn't change
-                // This prevents ghost gaps after large deletes that don't change page count
-                if (this.storage.allowUnstableUpdate) {
-                  this.storage.allowUnstableUpdate = false;
-                }
-                
-                // If we had scroll protection active but page count didn't change, clear it
-                if (this.storage.blockScrollIntoView && this.storage.offsetFromBottom !== undefined) {
-                  // Clean up scroll protection if no page change occurred
-                  delete this.storage.offsetFromBottom;
-                  delete this.storage.savedPageCountBeforeDeletion;
-                  requestAnimationFrame(() => {
-                    this.storage.blockScrollIntoView = false;
-                  });
-                }
               }
             }
           }
@@ -815,29 +840,18 @@ export const PaginationPlus = Extension.create<PaginationPlusOptions>({
         // Set paginated height - use the stored correct page count, not the calculated one
         const finalPageCount = this.storage.correctPageCount || pageCount;
         const paginatedHeight = calculatePaginatedHeight(finalPageCount);
+        
+        console.log('[PaginationPlus] Final page count determination:', {
+          calculatedPageCount: pageCount,
+          storedPageCount: this.storage.correctPageCount,
+          finalPageCount: finalPageCount,
+          paginatedHeight: paginatedHeight
+        });
 
         // Apply calculated height
         targetNode.style.height = `${paginatedHeight}px`;
         
-        // Restore scroll position for backspace deletions to prevent glitch
-        if (this.storage.offsetFromBottom !== undefined) {
-          // Only restore if the page count actually changed
-          const pageCountChanged = this.storage.savedPageCountBeforeDeletion !== undefined &&
-                                  finalPageCount !== this.storage.savedPageCountBeforeDeletion;
-          
-          if (pageCountChanged) {
-            // Page count decreased - restore the distance from bottom
-            const newScrollTop = targetNode.scrollHeight - targetNode.clientHeight - this.storage.offsetFromBottom;
-            
-            // Ensure the scroll position is valid
-            const maxScrollTop = targetNode.scrollHeight - targetNode.clientHeight;
-            targetNode.scrollTop = Math.max(0, Math.min(newScrollTop, maxScrollTop));
-          }
-          
-          // Clean up
-          delete this.storage.offsetFromBottom;
-          delete this.storage.savedPageCountBeforeDeletion;
-        }
+        // Scroll restoration is now handled by keydown/keyup handlers
         
         // Restore cursor position in viewport for typing scenarios
         if (this.storage.cursorViewportOffset !== undefined) {
@@ -860,15 +874,9 @@ export const PaginationPlus = Extension.create<PaginationPlusOptions>({
               
               // Clean up
               delete this.storage.cursorViewportOffset;
-              // Clear block after restoration
-              requestAnimationFrame(() => {
-                this.storage.blockScrollIntoView = false;
-              });
             } catch (e) {
               // If we can't restore position, fall back to ensuring cursor is visible
-              if (!this.storage.blockScrollIntoView) {
-                this.editor.commands.scrollIntoView();
-              }
+              this.editor.commands.scrollIntoView();
               delete this.storage.cursorViewportOffset;
             }
           });
@@ -974,9 +982,7 @@ export const PaginationPlus = Extension.create<PaginationPlusOptions>({
           // For large paste or new page creation, use TipTap's scrollIntoView
           requestAnimationFrame(() => {
             try {
-              if (!this.storage.blockScrollIntoView) {
-                this.editor.commands.scrollIntoView();
-              }
+              this.editor.commands.scrollIntoView();
             } catch (e) {
               // Fallback to restoring saved scroll position
               targetNode.scrollTop = savedScrollTop;
@@ -994,9 +1000,7 @@ export const PaginationPlus = Extension.create<PaginationPlusOptions>({
             // Only use scrollIntoView if we're not manually managing cursor position
             requestAnimationFrame(() => {
               try {
-                if (!this.storage.blockScrollIntoView) {
-                  this.editor.commands.scrollIntoView();
-                }
+                this.editor.commands.scrollIntoView();
               } catch (e) {
                 // Ignore scroll errors
               }
@@ -1027,10 +1031,6 @@ export const PaginationPlus = Extension.create<PaginationPlusOptions>({
         // Reset flags
         this.storage.positionSaved = false;
         
-        // Only reset blockScrollIntoView if we're not in the middle of handling a deletion
-        if (this.storage.offsetFromBottom === undefined) {
-          this.storage.blockScrollIntoView = false;
-        }
 
         if (callback) {
           callback();
@@ -1251,6 +1251,39 @@ export const PaginationPlus = Extension.create<PaginationPlusOptions>({
                   // Check if cursor is at the end of the document
                   const cursorAtEnd = tr.selection.from >= tr.doc.content.size - 1;
                   
+                  // OPTIMIZATION: Handle Enter at end of document specially
+                  if (isLikelyEnterKey && cursorAtEnd) {
+                    // Quick estimate: Will this new line cause a page overflow?
+                    const estimatedLineHeight = 24; // Standard line height
+                    const pageHeight = pageOptions.pageHeight - pageOptions.pageHeaderHeight * 2;
+                    
+                    // Calculate current content position on the last page
+                    const lastPageUsedHeight = node.scrollHeight % pageHeight || pageHeight;
+                    const remainingSpace = pageHeight - lastPageUsedHeight;
+                    
+                    // If new line would overflow, immediately add a page
+                    if (remainingSpace < estimatedLineHeight + 10) { // 10px buffer
+                      console.log('[PaginationPlus] OPTIMIZATION: Enter at end detected - adding page immediately');
+                      console.log(`  Remaining space: ${remainingSpace}px, need: ${estimatedLineHeight}px`);
+                      
+                      // Immediately increment page count
+                      const oldPageCount = extensionStorage.correctPageCount;
+                      extensionStorage.correctPageCount = oldPageCount + 1;
+                      
+                      console.log(`  Page count: ${oldPageCount} → ${extensionStorage.correctPageCount}`);
+                      
+                      // Trigger immediate decoration update
+                      requestAnimationFrame(() => {
+                        extensionStorage.editor.view.dispatch(
+                          extensionStorage.editor.view.state.tr.setMeta(pagination_meta_key, true)
+                        );
+                      });
+                      
+                      // Skip the expensive measurement for now
+                      extensionStorage.remeasureContent(1000); // Verify later
+                      // Skip position saving but continue with decoration handling
+                    }
+                  }
                   
                   // Don't preserve scroll for Enter key at end of document
                   if (!isLikelyEnterKey || !cursorAtEnd) {
@@ -1262,39 +1295,100 @@ export const PaginationPlus = Extension.create<PaginationPlusOptions>({
                     
                     // Save this offset for restoration after repagination
                     extensionStorage.cursorViewportOffset = cursorOffsetInViewport;
-                    extensionStorage.blockScrollIntoView = true;
                   }
                 }
-                // For deletions that might cause page shrinkage, save scroll position
+                // For deletions that might cause page shrinkage
                 else if (sizeDiff < 0) {
-                  // Only save if we haven't already saved for this deletion cycle
-                  if (extensionStorage.offsetFromBottom === undefined) {
-                    const offset = node.scrollHeight - node.clientHeight - node.scrollTop;
-                    extensionStorage.offsetFromBottom = offset;
-                    extensionStorage.blockScrollIntoView = true;
+                  // OPTIMIZATION: Handle Backspace that might remove a page
+                  const isBackspace = tr.steps.some(step => {
+                    return step.toJSON && step.toJSON().stepType === 'replace';
+                  });
+                  
+                  if (isBackspace && extensionStorage.correctPageCount > 1) {
+                    // Quick check: Are we near a page boundary?
+                    const pageHeight = pageOptions.pageHeight - pageOptions.pageHeaderHeight * 2;
+                    const currentPos = tr.selection.from;
+                    const docSize = tr.doc.content.size;
+                    
+                    // Check if we're near the start OR end of the document
+                    const nearPageStart = currentPos < 100; // Within 100 chars of document start
+                    const nearPageEnd = currentPos >= docSize - 10; // At or near the end of document
                     
-                    // Also save the current page count to detect if it actually changes
-                    extensionStorage.savedPageCountBeforeDeletion = extensionStorage.correctPageCount;
+                    // OPTIMIZATION: Handle backspace at end of document (most common case)
+                    if (nearPageEnd) {
+                      // Calculate if we're at the beginning of the last page
+                      const currentPageCount = extensionStorage.correctPageCount;
+                      const estimatedContentHeight = (currentPageCount - 1) * pageHeight;
+                      const lastPageContent = node.scrollHeight - estimatedContentHeight;
+                      
+                      // If last page has very little content, we can remove it
+                      if (lastPageContent < 50) { // Less than 50px of content on last page
+                        console.log('[PaginationPlus] OPTIMIZATION: Backspace at end detected - removing last page immediately');
+                        console.log(`  Last page content height: ${lastPageContent}px`);
+                        
+                        const oldPageCount = extensionStorage.correctPageCount;
+                        extensionStorage.correctPageCount = oldPageCount - 1;
+                        
+                        console.log(`  Page count: ${oldPageCount} → ${extensionStorage.correctPageCount}`);
+                        
+                        // Scroll handling is done by keydown/keyup handlers
+                        
+                        // Trigger immediate decoration update
+                        requestAnimationFrame(() => {
+                          extensionStorage.editor.view.dispatch(
+                            extensionStorage.editor.view.state.tr.setMeta(pagination_meta_key, true)
+                          );
+                        });
+                        
+                        // Skip expensive measurement
+                        extensionStorage.remeasureContent(500); // Verify later
+                      }
+                    }
+                    // Original optimization for backspace near start
+                    else if (nearPageStart) {
+                      console.log('[PaginationPlus] OPTIMIZATION: Backspace near start detected - removing page immediately');
+                      console.log(`  Cursor position: ${currentPos}`);
+                      
+                      // Likely removing content that will eliminate a page
+                      // Immediately decrement page count
+                      const oldPageCount = extensionStorage.correctPageCount;
+                      if (oldPageCount > 1) {
+                        extensionStorage.correctPageCount = oldPageCount - 1;
+                        
+                        console.log(`  Page count: ${oldPageCount} → ${extensionStorage.correctPageCount}`);
+                        
+                        // Scroll handling is done by keydown/keyup handlers for backspace at end
+                        // For backspace near start, we don't need scroll adjustment
+                        
+                        // Trigger immediate decoration update
+                        requestAnimationFrame(() => {
+                          extensionStorage.editor.view.dispatch(
+                            extensionStorage.editor.view.state.tr.setMeta(pagination_meta_key, true)
+                          );
+                        });
+                        
+                        // Skip expensive measurement
+                        extensionStorage.remeasureContent(500); // Verify later
+                      }
+                    }
                   }
                 }
                 
-                // Don't use scrollIntoView for typing - we'll handle it manually
-                if (!extensionStorage.blockScrollIntoView) {
+                // Let TipTap handle scrollIntoView normally
+                requestAnimationFrame(() => {
                   requestAnimationFrame(() => {
-                    requestAnimationFrame(() => {
-                      try {
-                        const editor = extensionStorage.editor;
-                        if (!editor) {
-                          return;
-                        }
-                        
-                        editor.commands.scrollIntoView();
-                      } catch (e) {
-                        // Ignore scroll errors
+                    try {
+                      const editor = extensionStorage.editor;
+                      if (!editor) {
+                        return;
                       }
-                    });
+                      
+                      editor.commands.scrollIntoView();
+                    } catch (e) {
+                      // Ignore scroll errors
+                    }
                   });
-                }
+                });
               }
               
               // Document changed or undo/redo operation
@@ -1311,10 +1405,6 @@ export const PaginationPlus = Extension.create<PaginationPlusOptions>({
                   extensionStorage.lockedHeightRange = { min: 0, max: 0 };
                 }
                 
-                // Flag content deletion to bypass height stability requirement
-                if (sizeDiff < 0 || isUndoRedo) {
-                  extensionStorage.allowUnstableUpdate = true;
-                }
                 
                 // Handle large paste with faster remeasurement
                 if (isLargePaste) {
@@ -1338,10 +1428,6 @@ export const PaginationPlus = Extension.create<PaginationPlusOptions>({
 
             // Only update decorations for explicit pagination updates (not normal typing)
             if (tr.getMeta(pagination_meta_key)) {
-              // Clear allowUnstableUpdate flag on any decoration refresh to prevent ghost gaps
-              if (extensionStorage.allowUnstableUpdate) {
-                extensionStorage.allowUnstableUpdate = false;
-              }
               
               const widgetList = createDecoration(
                 newState,
